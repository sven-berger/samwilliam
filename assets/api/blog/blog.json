[
    {
        "ID": 5,
        "headline": "Warum ich Stimulus liebe",
        "content": "<p>Als ich das erste Mal gebeten wurde, mir Stimulus anzusehen, war ich ehrlich gesagt &uuml;berfordert. Ich schaute mir den Code auf der offiziellen Webseite an und dachte nur: \"H&auml;? Warum sollte man damit arbeiten? Das wirkt doch kompliziert und zerst&ouml;rt den HTML-Code!\"<br>Damals ging ich noch davon aus, dass es am einfachsten sei, einfach eine JavaScript-Datei einzubinden und den ben&ouml;tigten HTML-Bereich direkt im JavaScript zu erzeugen.<br>Doch je mehr ich mich mit Stimulus besch&auml;ftigte, desto mehr verstand ich die Philosophie dahinter. Und heute muss ich sagen: Wow. F&uuml;r jemanden wie mich, der Ordnung liebt, ist Stimulus ein echtes Geschenk.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Es ist nicht &uuml;bertrieben, wenn Hotwire sagt, dass man damit HTML und JavaScript perfekt voneinander trennen kann. Laien, die den HTML-Code sehen, fragen sich vielleicht, wie das Ganze &uuml;berhaupt funktioniert. Denn abgesehen von ein paar kleinen Attributen wie data-controller, deutet nichts darauf hin, dass im Hintergrund JavaScript am Werk ist.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Ich muss zugeben: Obwohl mir Stimulus in Erinnerung geblieben ist, musste ich mir meine alten Skripte noch einmal ansehen, um wieder in den Flow zu kommen. Doch kaum war ich wieder drin, erinnerte ich mich auch daran, warum meine Liebe zu diesem Framework so stark gewachsen ist.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Hier ein kleines Beispiel:&nbsp;<\/p>\r\n<pre><code class=\"language-php\">&lt;section class=\"mb-20\" data-controller=\"blogPage\"&gt;\r\n  &lt;div id=\"blogContainer\" data-blogPage-target=\"blogContainer\"&gt;&lt;\/div&gt;\r\n  &lt;template id=\"blogTemplate\"&gt;\r\n    &lt;h2 class=\"inline-block text-6xl mt-5 mb-10 border-b-4 text-red-500 border-orange-400 pb-2 font-bold\"&gt;&lt;\/h2&gt;\r\n    &lt;p&gt;Ver&ouml;ffentlicht am &lt;span class=\"text-red-500\"&gt;&lt;\/span&gt;&lt;\/p&gt;\r\n    &lt;div class=\"content mt-5\"&gt;&lt;\/div&gt;\r\n    &lt;div class=\"mt-10 mb-20 flex\"&gt;\r\n      &lt;small class=\"text-gray-500 italic\"&gt;Letzte &Auml;nderung: &lt;span&gt;&lt;\/small&gt;\r\n    &lt;\/div&gt;\r\n  &lt;\/template&gt;\r\n&lt;\/section&gt;<\/code><\/pre>\r\n<p>Die Datei&nbsp;<code>blog.lib.php<\/code> zieht ihre Inhalte aus einer JSON-Datei.<br>Also muss es irgendwo ein <code>fetch()<\/code> oder eine <code>async<\/code>-Funktion geben, oder? Ganz genau.<br>Willst du jetzt meine dazugeh&ouml;rige JavaScript-Datei sehen?<br>Hier ist sie:&nbsp;<\/p>\r\n<pre><code class=\"language-js\">import { Controller } from \"https:\/\/unpkg.com\/@hotwired\/stimulus\/dist\/stimulus.js\";\r\n\r\nexport default class extends Controller {\r\n    static targets = [\r\n        \"blogContainer\"\r\n    ];\r\n\r\n    connect() {\r\n        this.blogRequest();\r\n    }\r\n\r\n    async blogRequest() {\r\n        const response = await fetch(\"\/assets\/api\/blog\/blog.json\");\r\n        const daten = await response.json();\r\n        const template = document.querySelector(\"#blogTemplate\");\r\n        daten.forEach(eintrag =&gt; {\r\n            const clone = template.content.cloneNode(true);\r\n            clone.querySelector(\"h2\").textContent = eintrag.headline;\r\n            clone.querySelector(\"p span\").textContent = this.formatDate(eintrag.created_at);\r\n            clone.querySelector(\".content\").innerHTML = eintrag.content;\r\n            clone.querySelector(\"small span\").textContent = this.formatDate(eintrag.changed_at);\r\n\r\n            this.blogContainerTarget.appendChild(clone);\r\n        });\r\n    }\r\n\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n        const hour = String(date.getHours()).padStart(2, '0');\r\n        const minute = String(date.getMinutes()).padStart(2, '0');\r\n        return `${day}.${month}.${year} um ${hour}:${minute} Uhr`;\r\n    }\r\n}<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>Sexy, oder?<br>So kurz, so elegant und dennoch alles, was mein Blog braucht.<br>Ich freue mich schon darauf, noch tiefer in Stimulus einzutauchen und weitere Komponenten damit zu bauen.<\/p>",
        "created_at": "2025-08-21 22:46:00",
        "changed_at": "2025-08-23 20:47:55"
    },
    {
        "ID": 4,
        "headline": "Mein pragmatisches Backup-System",
        "content": "<p>Meine redundate Backup-Methode ist &ndash; wenn ich richtig unterrichtet bin &ndash; streng genommen kein redundantes Sicherheitssystem aus technischer Sicht - Schlie&szlig;lich nutze ich weder ein NAS noch ein SAN-System, nicht einmal eine zweite Festplatte in meinem PC, dennoch nenne ich es so, weil das Prinzip das Gleiche ist in meinen Augen.<br>Wahrscheinlich w&uuml;rde mir daf&uuml;r jeder FiSi-Nerd f&uuml;r die Bezeichnung &bdquo;redundantes Backup-System&ldquo; eine Backpfeife geben.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Kurz gesagt: Bei mir kommt keine spezielle Hardware zum Einsatz und dennoch sind meine Daten vier- bis f&uuml;nffach gesichert:<\/p>\r\n<ul class=\"list-disc ml-6 my-4\">\r\n<li>Lokal auf meinem PC<\/li>\r\n<li>In meiner Dropbox&nbsp;<\/li>\r\n<li>Auf meinem Server<\/li>\r\n<li>Auf GitHub<\/li>\r\n<li>Und zus&auml;tzlich manuell auf einem USB-Stick<\/li>\r\n<\/ul>\r\n<p>Alles arbeitet dabei Hand in Hand.<br>- Mein lokaler Webserver l&auml;uft in Docker.<br>- Die Container liegen in einem bestimmten Verzeichnis auf meiner Festplatte, welches gleichzeitig von Dropbox als Synchronisationsordner genutzt wird.<br>- Das bedeutet: Jede &Auml;nderung an meiner Seite wird sofort lokal gespeichert und automatisch mit Dropbox abgeglichen.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Danach pushe ich jede &Auml;nderung zu GitHub &ndash; dank der Integration in Visual Studio Code geht das mit zwei Klicks.<br>Doch mein GitHub-Repo ist nicht faul: Eine GitHub Action verbindet sich bei jedem Push mit meinem Server und f&uuml;hrt dort ein <code>git pull<\/code> aus.<br>Oder einfacher gesagt: GitHub &bdquo;l&auml;dt&ldquo; die &Auml;nderungen direkt auf meinen Server hoch. Dieser Vorgang dauert etwa 8&ndash;10 Sekunden.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Auch meine MySQL-Datenbank (in der die meisten Inhalte gespeichert sind), ist abgesichert.&nbsp;<br>Sie liegt &uuml;brigens bei einem externen Anbieter, der auch noch regelm&auml;&szlig;ig Backups erstellt. <br>Zus&auml;tzlich sichere ich sowohl die Datenbank als auch das Dateisystem regelm&auml;&szlig;ig manuell auf einem USB-Stick.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Zusammengefasst bedeutet das: Innerhalb von zehn Sekunden nach dem Speichern ist mein Skript lokal gesichert, in Dropbox synchronisiert, auf GitHub hochgeladen und auf meinem Server verf&uuml;gbar.<br>Und seien wir mal ehrlich: Wie hoch ist die Wahrscheinlichkeit, dass mein PC kaputtgeht, Dropbox mein Konto l&ouml;scht, GitHub mich rauswirft, mein Hoster den Server sperrt, mein Datenbank-Anbieter k&uuml;ndigt und das&nbsp;<span class=\"font-bold\">alles gleichzeitig<\/span>?<\/p>",
        "created_at": "2025-08-20 02:34:00",
        "changed_at": "2025-08-21 22:29:30"
    },
    {
        "ID": 3,
        "headline": "Inhalts-System fertiggestellt",
        "content": "<p>Die erste Version meines Inhalts-Systems ist zwar einfach, aber aus technischer Sicht sehr effizient.<\/p>\r\n<ol>\r\n<li>Der Inhalt einer Seite wird im Backend (PHP) angelegt<\/li>\r\n<li>in der MySQL-Datenbank gespeichert<\/li>\r\n<li>und anschlie&szlig;end von einem kleinen PHP-Skript aus der Datenbank in eine JSON-Datei exportiert.<\/li>\r\n<\/ol>\r\n<p>Das Frontend &ndash; also JavaScript &ndash; liest diese JSON-Datei ein und gibt die Inhalte aus.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Wieso gehe ich diesen Umweg &uuml;ber die Datenbank und erstelle nicht direkt eine JSON-Datei mit PHP?<br>Die Gr&uuml;nde kann ich dir gerne nennen:&nbsp;<\/p>\r\n<ul class=\"list-disc ml-6 my-4\">\r\n<li><span class=\"font-bold\">Lesbarkeit des Codes<br><\/span><em>Die Trennung zwischen Datenhaltung und Ausgabe macht den Code klarer.<\/em><\/li>\r\n<li><span class=\"font-bold\">MySQL als &bdquo;Single Source of Truth&ldquo;<br><\/span><em>Die Datenbank ist die zentrale und verl&auml;ssliche Quelle aller Inhalte.<\/em><\/li>\r\n<li><span class=\"font-bold\">Mehr Sicherheit<br><\/span><em>Validierungen werden im Backend durchgef&uuml;hrt, nicht im Frontend.<\/em><\/li>\r\n<li><span class=\"font-bold\">Teil meines Backup-Systems<br><\/span><em>Die Datenbank ist in meine redundanten Backups integriert &ndash; <span class=\"font-bold\">dazu<\/span> folgt ein eigener Artikel.<\/em><\/li>\r\n<\/ul>\r\n<p>Das ist eine Entscheidung, die wohl jeder Softwareentwickler mit Verst&auml;ndnis f&uuml;r saubere Datenhaltung nachvollziehen kann.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Abschlie&szlig;end kann ich sagen: Ich bin stolz auf meine Arbeit.<\/p>\r\n<p>Mein n&auml;chster Schritt ist es jedoch, vom &bdquo;normalen&ldquo; JavaScript zu&nbsp;<a href=\"https:\/\/stimulus.hotwired.dev\/\" target=\"_blank\" rel=\"noopener\">Stimulus<\/a> zu wechseln &ndash; alleine schon wegen der besseren Trennung von Logik und Darstellung.<\/p>\r\n<p>Gleichzeitig dient mir das als &Uuml;bung und Wiederholung.<\/p>",
        "created_at": "2025-08-19 21:03:00",
        "changed_at": "2025-08-21 22:32:47"
    },
    {
        "ID": 2,
        "headline": "Integration meiner alten Projekte",
        "content": "<p data-start=\"455\" data-end=\"1140\">Im Laufe der Zeit habe ich viele kleine Spielereien entwickelt &ndash; etwa einen Eintrittspreisrechner oder einen Umsatzrechner.<br>Das waren zwar keine Tools, die die Welt gebraucht hat, aber sie haben mir geholfen, die Grundlagen zu verstehen.<br data-start=\"692\" data-end=\"695\">Sp&auml;ter kamen n&uuml;tzlichere Projekte hinzu, wie ein Passwortgenerator oder ein Mini-Taschenrechner.<\/p>\r\n<p data-start=\"455\" data-end=\"1140\">Der Mini-Taschenrechner konnte zwar nur die Grundfunktionen,&nbsp;arbeitete aber direkt mit Formularen:<br><strong>Zahl #1<\/strong><em> <\/em>eingeben, eine <strong>Operation ausw&auml;hlen<\/strong>, <strong>Zahl #2<\/strong> eingeben &ndash; und JavaScript hat das Ergebnis sofort berechnet, ganz ohne Formular-Absenden.<br>Auch das war zwar noch eine &bdquo;Spielerei&ldquo;, aber eine, die mir viel Spa&szlig; gemacht und meine Kenntnisse in Stimulus erweitert hat.<\/p>\r\n<p data-start=\"1142\" data-end=\"1392\">Zu meinen gr&ouml;&szlig;ten Erfolgen geh&ouml;ren folgendes:<\/p>\r\n<ul>\r\n<li data-start=\"1142\" data-end=\"1392\">Ein Adventskalender<\/li>\r\n<li data-start=\"1142\" data-end=\"1392\">Die Einbindung von GPT-4<\/li>\r\n<li data-start=\"1142\" data-end=\"1392\">Eine Unterseite, die aktuelle Wetterdaten per API abruft<\/li>\r\n<li data-start=\"1142\" data-end=\"1392\">Sowie ein kleines Skript, das mit Erlaubnis auf die Kamera zugreifen und sogar ein Standfoto aufnehmen kann.<\/li>\r\n<\/ul>\r\n<p data-start=\"1394\" data-end=\"1835\">Viele dieser Projekte liegen allerdings schon l&auml;nger zur&uuml;ck &ndash; und manche sind noch in PHP statt in JavaScript geschrieben.<br>Deshalb m&ouml;chte ich meine alten Sachen wieder hervorkramen. Ich werde sie nicht unbedingt komplett neu schreiben, aber bei der Integration auf dieser Seite bewusst von Codezeile #1 an starten und das, soweit es die Technik zul&auml;sst, in Stimulus (JavaScript) und nicht in PHP.<\/p>\r\n<p data-start=\"1394\" data-end=\"1835\">So kann ich mein Wissen auffrischen, wiederholen &ndash; und vor allem den alten Stolz zur&uuml;ckholen, den ich beim ersten Mal hatte.<\/p>",
        "created_at": "2025-08-19 11:15:26",
        "changed_at": "2025-08-24 00:40:58"
    },
    {
        "ID": 1,
        "headline": "Ver\u00f6ffentlichung der neuen Seite",
        "content": "<p>Nach langer Vorbereitung, Planung und &Uuml;berlegungen, ist meine neue Seite endlich online.<\/p>\r\n<ul>\r\n<li>Planung und &Uuml;berlegung in der Hinsicht: Ich wollte die Seite f&uuml;r mich besonders gestalten und nicht immer nach dem selbem Schema<\/li>\r\n<li>Vorbereitung: Ich wollte weg von Bootstrap, da dieses doch zu eingeschr&auml;nkt ist und hin zu <a href=\"https:\/\/tailwindcss.com\/\">Tailwind CSS<\/a>, alleine schon, weil dieses Framework auch in meinem Praktikumsbetrieb zum Einsatz kommt.<\/li>\r\n<\/ul>\r\n<p>Als <strong>Backend <\/strong>kommt hier auf dieser Seite <strong>(noch) <a href=\"https:\/\/www.php.net\/\">PHP<\/a> <\/strong>zum Einsatz, allerdings arbeite ich bereits im Hintergrund daran, auf <a href=\"https:\/\/rubyonrails.org\/\">Ruby on Rails<\/a> umzusteigen, der Grund ist ebenfalls das Praktikum.<br>Im Frontend kommt gr&ouml;&szlig;tenteils JavaScript zum Einsatz, genau genommen ein Framework davon namens <a title=\"Stimulus\" href=\"https:\/\/stimulus.hotwired.dev\/\">Stimulus<\/a> - Dieses Framework ist so besonders meiner Meinung nach, weil es ganz klar HTML und JavaScript voneinander trennt und es somit nicht&nbsp; mehr n&ouml;tig ist, innerhalb von JS HTML-Klassen erzeugen zu m&uuml;ssen, was hei&szlig;t: Im HTML kommt kein JavaScript-Code vor, in JavaScript-Code kein HTML.<br>M&ouml;glicherweise werde ich auch im Frontend auf kleine PHP-Funktionen zur&uuml;ckgreifen, allerdings nur, weil PHP trotz des gro&szlig;en Wandels von JavaScript, Funktionen generell beherrscht, die JavaScript nicht hat oder man mit PHP gewisse Sachen schneller und einfacher umsetzen kann, als mit JavaScript.<\/p>\r\n<p><br>Ich freue mich schon auf die Zukunft und auf das, was ich noch lernen werde - Bei dieser Seite f&uuml;hle ich mich erstmal komplett zuhause, denn sie hat einen gro&szlig;en Vorteil:&nbsp;<\/p>\r\n<h3 data-start=\"2046\" data-end=\"2386\">Warum der Aufwand?<\/h3>\r\n<p data-start=\"347\" data-end=\"751\">Ich wollte eine Seite, die nicht nach dem immer gleichen Schema aufgebaut ist. Deshalb habe ich Bootstrap durch Tailwind CSS ersetzt.<br>Der Unterschied: Bei Tailwind gibt es keine fertigen Vorlagen &ndash; man muss wissen, wie man etwas gestalten m&ouml;chte. Das bringt mehr Freiheit, erfordert aber auch mehr eigenes Denken.<br>Au&szlig;erdem nutze ich Tailwind, weil es auch in meinem Praktikumsbetrieb zum Einsatz kommt.<br>Das Ergebnis ist eine Seite, die von Beginn an responsiv ist, nur drei klare Farben verwendet und dadurch bewusst schlicht bleibt.<\/p>\r\n<h3 data-start=\"347\" data-end=\"751\">Fazit<\/h3>\r\n<p data-start=\"347\" data-end=\"751\">Dank Tailwind ist das Stylesheet schlank gehalten, und auch meine globale CSS-Datei enth&auml;lt nur wenige Hilfsklassen &ndash; gerade so viel, wie f&uuml;r Blog, Formulare und Tabellen n&ouml;tig ist.<br>Die Seite steht erstmal, aber ich denke, ich werde bis zum 17.09.2025 sehr wenig Zeit haben, weil an dem Tag meine Abschlusspr&uuml;fung I ist und ich bis dahin noch lernen \"muss\", viel mehr m&ouml;chte, auch wenn die Anzahl der Themen, bei denen ich mir aktuell noch unsicher bin, in Grenzen h&auml;lt.<\/p>",
        "created_at": "2025-08-17 18:56:46",
        "changed_at": "2025-08-21 18:46:24"
    }
]